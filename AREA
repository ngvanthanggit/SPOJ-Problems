#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

#define name "AREA."
#define fu(i, a, b) for (int i = a; i <= b; ++i)
#define pb push_back
#define all(X) X.begin(), X.end()

using namespace std;
typedef long long ll;
typedef pair <int, int> ii;
const int N = 2e5 +7;

struct data
{
    int x, u, v, d;
    bool operator < (const data &a) const
    {
        if (x != a.x) return x < a.x;
        if (d != a.d) return d < a.d;
        return u < a.u;
    }
} a[N];

int n, sub;
int mi, ma;

void inp()
{
    cin >> n;
    n = 0;

    int x1, y1, x2, y2;
    ma = -1e9; mi = 1e9;
    while (cin >> x1 >> y1 >> x2 >> y2)
    {
        mi = min (mi, y1 + 1);
        ma = max (ma, y2);
        a[++n] = {x1, y1 + 1, y2, 1};
        a[++n] = {x2, y1 + 1, y2, -1};
    }
    if (ma - mi <= 2e5) sub = 1;
}
struct sub1
{
    struct segtree {
        ll sum, cnt;
    } it[N << 2];

    int L[N << 2], R[N << 2];

    void build(int id, int l, int r)
    {
        if ((L[id] = l) == (R[id] = r)) return;
        int m = (l + r) >> 1;
        build(id << 1, l, m);
        build(id << 1 | 1, m + 1, r);
    }
    void update(int id, int l, int r, int val)
    {
        if (r < L[id] || R[id] < l) return;
        if (l <= L[id] && R[id] <= r)
        {
            it[id].cnt += val;
            if (val == 1)
                it[id].sum = R[id] - L[id] + 1;
            else
                if (!it[id].cnt)
                    if (L[id] < R[id])
                        it[id].sum = it[id << 1].sum + it[id << 1 | 1].sum;
                    else
                        it[id].sum = 0;
            return;
        }
        update(id << 1, l, r, val);
        update(id << 1 | 1, l, r, val);
        if (!it[id].cnt)
            it[id].sum = it[id << 1].sum + it[id << 1 | 1].sum;
    }
    void solve()
    {
        sort (a + 1, a + n + 1);

        fu(i, 1, n)
            a[i].u += -mi + 1, a[i].v += -mi + 1;
        ma += -mi + 1;
        build(1, 1, ma);
        update(1, a[1].u, a[1].v, 1);

        ll res = 0;
        fu(i, 2, n)
        {
            res += it[1].sum * (a[i].x - a[i - 1].x);
            update(1, a[i].u, a[i].v, a[i].d);
        }
        cout << res;
    }
} sub1;
int main()
{
    ios :: sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen(name"INP", "r", stdin);
    freopen(name"OUT", "w", stdout);

    #endif // ONLINE_JUDGE

    inp();
    sub = 1;
    if (sub == 1) sub1.solve();
    return 0;
}
