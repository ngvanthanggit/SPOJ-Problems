#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

#define name "CRATE."

using namespace std;
const int N = 3e5 + 1;
const int A = 1e5;

template <typename T>
inline void read(T &x)
{
    char c;
    bool b = 0;
    for (c = getchar(); c < '0' || c > '9'; c = getchar())
        if (c == '-') b = 1;
    x = c - '0';
    for (c = getchar(); c >= '0' && c <= '9'; c = getchar())
        x = x * 10 + c - '0';
    if (b) x = -x;
}
struct Fenwick
{
    int n;
    vector <long long> f;
    Fenwick (int n) : n(n), f(n + 1, 0) {}
    void set(int i) {
        for (; i <= n; i += i & -i) ++f[i];
    }
    long long get(int i) {
        long long res = 0;
        for (; i > 0; i -= i & -i) res += f[i];
        return res;
    }
};

struct data {
    int x, y, id;
    bool operator < (const data &a) const {
        if (y < a.y) return true;
        if (y == a.y && x < a.x) return true;
        return false;
    }
}a[N];

Fenwick bit(A);
int n;
int ans[N];

int main()
{
    ios :: sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    read(n);
    int x, y, z;
    for (int i = 1; i <= n; ++i)
    {
        read(x); read(y);
        a[i] = {x, y, i};
    }

    fill(ans + 1, ans + n + 1, 0);
    sort(a + 1, a + n + 1);
    for (int i = 1; i <= n; ++i)
    {
        int k = bit.get(a[i].x);
        ans[a[i].id] = k;
        bit.set(a[i].x);
        if (i < n && a[i + 1].x == a[i].x && a[i + 1].y == a[i].y)
        {
            while (i < n && a[i + 1].x == a[i].x && a[i + 1].y == a[i].y)
                ans[a[++i].id] = k, bit.set(a[i].x);
        }
    }
    for (int i = 1; i <= n; ++i) cout << ans[i] << '\n';
    return 0;
}
